#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>


/*
  Top left (TL), top right (TR), bottom left (BL) and bottom right (BR)
  are special keys with tap dances and all kinds of fancy stuff
  see below.
  The numbers represent the braille dots, so '1' means 'braille dot 1'

  ╭─────────────────╮
  │  TL  1   4  TR  │
  │      2   5      │
  │      3   6      │
  │  BL  7   8  BR  │
  ╰─────────────────╯
*/

#define TAPPING_TERM 250

#define DOTS_TIMEOUT 100

// position of dots on keyboard
#define D1 1
#define D2 4
#define D3 6
#define D4 2
#define D5 5
#define D6 7
#define D7 9
#define D8 10

/ {
    combos {
        compatible = "zmk,combos";
        combo_A { key-positions = <D1>;             bindings = <&kp A>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_B { key-positions = <D1 D2>;          bindings = <&kp B>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_C { key-positions = <D1 D4>;          bindings = <&kp C>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_D { key-positions = <D1 D4 D5>;       bindings = <&kp D>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_E { key-positions = <D1 D5>;          bindings = <&kp E>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_F { key-positions = <D1 D2 D4>;       bindings = <&kp F>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_G { key-positions = <D1 D2 D4 D5>;    bindings = <&kp G>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_H { key-positions = <D1 D2 D5>;       bindings = <&kp H>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_I { key-positions = <D2 D4>;          bindings = <&kp I>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_J { key-positions = <D2 D4 D5>;       bindings = <&kp J>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_K { key-positions = <D1 D3 >;         bindings = <&kp K>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_L { key-positions = <D1 D2 D3 >;      bindings = <&kp L>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_M { key-positions = <D1 D3 D4>;       bindings = <&kp M>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_N { key-positions = <D1 D3 D4 D5>;    bindings = <&kp N>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_O { key-positions = <D1 D3 D5>;       bindings = <&kp O>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_P { key-positions = <D1 D2 D3 D4>;    bindings = <&kp P>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_Q { key-positions = <D1 D2 D3 D4 D5>; bindings = <&kp Q>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_R { key-positions = <D1 D2 D3 D5>;    bindings = <&kp R>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_S { key-positions = <D2 D3 D4>;       bindings = <&kp S>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_T { key-positions = <D2 D3 D4 D5>;    bindings = <&kp T>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_U { key-positions = <D1 D3 D6>;       bindings = <&kp U>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_V { key-positions = <D1 D2 D3 D6>;    bindings = <&kp V>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_W { key-positions = <D2 D4 D5 D6>;    bindings = <&kp W>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_X { key-positions = <D1 D3 D4 D6>;    bindings = <&kp X>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_Y { key-positions = <D1 D3 D4 D5 D6>; bindings = <&kp Y>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_Z { key-positions = <D1 D3 D5 D6>;    bindings = <&kp Z>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_AUML { key-positions = <D3 D4 D5>;    bindings = <&kp RA(Q)>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_OUML { key-positions = <D2 D4 D6>;    bindings = <&kp RA(P)>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_UUML { key-positions = <D1 D2 D5 D6>; bindings = <&kp RA(Y)>; timeout-ms = <DOTS_TIMEOUT>; };
        combo_SUML { key-positions = <D2 D3 D4 D6>; bindings = <&kp RA(S)>; timeout-ms = <DOTS_TIMEOUT>; };

        combo_COMM { key-positions = <D2>;          bindings = <&kp COMMA >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_SCOL { key-positions = <D2 D3>;       bindings = <&kp SEMI >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_COLO { key-positions = <D2 D5>;       bindings = <&kp COLON >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_QUE1 { key-positions = <D2 D6>;       bindings = <&kp QUESTION >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_EXCL { key-positions = <D2 D3 D5>;    bindings = <&kp EXCLAMATION >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_LEFT { key-positions = <D2 D3 D5 D6>; bindings = <&kp LPAR >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_DOU1 { key-positions = <D2 D3 D6>;    bindings = <&kp DOUBLE_QUOTES >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_DOU2 { key-positions = <D3 D5 D6>;    bindings = <&kp DOUBLE_QUOTES >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_QUE2 { key-positions = <D3 D4 D6>;    bindings = <&kp QUESTION >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_PERI { key-positions = <D3>;          bindings = <&kp DOT >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_MINU { key-positions = <D3 D6>;       bindings = <&kp MINUS >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_QUOT { key-positions = <D6>;          bindings = <&kp APOSTROPHE >; timeout-ms = <DOTS_TIMEOUT>; };

        combo_1 { key-positions = <D1 D6>;          bindings = <&kp N1 >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_2 { key-positions = <D1 D2 D6>;       bindings = <&kp N2 >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_3 { key-positions = <D1 D4 D6>;       bindings = <&kp N3 >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_4 { key-positions = <D1 D4 D5 D6>;    bindings = <&kp N4 >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_5 { key-positions = <D1 D5 D6>;       bindings = <&kp N5 >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_6 { key-positions = <D1 D2 D4 D6>;    bindings = <&kp N6 >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_7 { key-positions = <D1 D2 D4 D5 D6>; bindings = <&kp N7 >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_8 { key-positions = <D1 D2 D5 D6>;    bindings = <&kp N8 >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_9 { key-positions = <D2 D4 D6>;       bindings = <&kp N9 >; timeout-ms = <DOTS_TIMEOUT>; };
        combo_0 { key-positions = <D3 D4 D6>;       bindings = <&kp N0 >; timeout-ms = <DOTS_TIMEOUT>; };
    };
};

/ {
/* 
TOP-LEFT: 
    - tap 1: left
    - tap 2: LControl
    - tap 3: switch to bootloader mode 
TOP-RIGHT: 
    - tap 1: right
    - tap 2: LAlt
    - tap 3: switch to bootloader mode 
BOTTOM-LEFT:
    - tap 1: SPACE / HOLD: RALT
    - tap 2: BSPACE
BOTTOM-RIGHT:
    - tap 1: ENTER / HOLD: LSHIFT
*/
    behaviors {
        top_left: top_left {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp LEFT>, <&mt LCTRL ESCAPE>, <&bootloader>;
        };

        top_right: top_right {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp RIGHT>, <&kp LALT>, <&bootloader>;
        };

        bottom_left: tap_dance_bottom_left {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&mt RALT SPACE>, <&kp BACKSPACE>, <&bootloader>;
        };
        bottom_right: tap_dance_bottom_right {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&mt LSHIFT ENTER>, <&kp Z>, <&bootloader>;
        };
    };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
    &top_right          &trans  &trans  &top_left
                        &trans  &trans
                        &trans  &trans
    &bottom_right       &trans  &trans  &bottom_left
            >;
        };
    };
};